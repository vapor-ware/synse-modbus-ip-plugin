#!/usr/bin/env groovy

pipeline {

  agent any

  environment {
    IMAGE_NAME = 'vaporio/modbus-ip-plugin'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        sh 'rm -rfv vendor'
      }
    }

    // Run linting on project source code.
    stage('Lint') {
      agent {
        docker {
          image 'vaporio/golang:1.13'
          reuseNode true
        }
      }
      steps {
        sh 'make lint'
      }
    }

    // Run unit tests.
    stage('Test') {
      agent {
        docker {
          image 'vaporio/golang:1.13'
          reuseNode true
        }
      }
      steps {
        sh 'make test'
      }
}

    // Verify that the Docker image builds successfully.
    stage('Build Image') {
      steps {
        sh 'make docker'
      }
    }

    // Build the image with the 'edge' tag and publish it to DockerHub. This
    // should only be run on the master branch (e.g. PR merge)
    stage('Publish Edge Image') {
      when {
        branch 'master'
      }
      steps {
        withDockerRegistry(registry: [credentialsId: 'vio-docker-hub']) {
          sh './bin/ci/build_and_publish.sh edge'
        }
      }
    }

    // Build artifacts for the GitHub Release.
    stage('Build Release Artifacts') {
      agent {
        docker {
          image 'vaporio/golang:1.13'
          reuseNode true
        }
      }
      when {
        // example matches: 1.2.3, 1.2.3-dev
        tag pattern: '(0|[1-9]*)\\.(0|[1-9]*)\\.(0|[1-9]*)(-(\\S*))?$', comparator: "REGEXP"
      }
      steps {
        // Build the project artifacts
        sh 'make ci-build'
      }
    }

    // Generate a new release draft on GitHub for a tag matching a version string
    // pattern. The release will include an auto-generated changelog and build
    // artifacts.
    stage('Draft GitHub Release') {
      when {
        // example matches: 1.2.3, 1.2.3-dev
        tag pattern: '(0|[1-9]*)\\.(0|[1-9]*)\\.(0|[1-9]*)(-(\\S*))?$', comparator: "REGEXP"
      }
      environment {
        GITHUB_USER = 'vapor-ware'
        GITHUB_TOKEN = credentials('vio-bot-gh-token')
        GITHUB_REPONAME = 'synse-modbus-ip-plugin'
      }
      steps {
        sh 'make ci-check-version'

        // Auto-generate a changelog for the release
        sh './bin/ci/generate_changelog.sh'

        // Create the release
        sh 'docker pull edaniszewski/ghr'
        sh 'docker run --rm -v ${WORKSPACE}:/repo edaniszewski/ghr -u ${GITHUB_USER} -r ${GITHUB_REPONAME} -t ${GITHUB_TOKEN} -b "$(cat ./CHANGELOG.md)" -replace -draft ${TAG_NAME} build/'
      }
    }

    // Build the image with the release tags and publish it to Dockerhub. This
    // should only be run on a git tag matching a version string pattern. This
    // should only run if the "Draft GitHub Release" stage completed successfully.
    stage('Publish Release Images') {
      when {
        // example matches: 1.2.3, 1.2.3-dev
        tag pattern: '(0|[1-9]*)\\.(0|[1-9]*)\\.(0|[1-9]*)(-(\\S*))?$', comparator: "REGEXP"
      }
      steps {
        sh 'make ci-check-version'
        withDockerRegistry(registry: [credentialsId: 'vio-docker-hub']) {
          sh './bin/ci/build_and_publish.sh latest'
        }
      }
    }
  }
}
